import collections.abc
from typing import Any, Iterable, Literal, Optional, Protocol, Union

class Device(Protocol):
    @property
    def action(self) -> Optional[str]: ...
    @property
    def properties(self) -> collections.abc.Mapping[str, str]: ...
    @property
    def sys_path(self) -> str: ...

class Context(Protocol):
    def list_devices(self, **kwargs: Any) -> Iterable[Device]: ...

class Monitor(Protocol):
    @classmethod
    def from_netlink(
        cls,
        context: Context,
        source: Literal['udev', 'kernel'] = ...,
    ) -> 'Monitor': ...
    def filter_by(
        self,
        subsystem: Union[bytes, str],
        device_type: Optional[Union[bytes, str]] = ...,
    ) -> None: ...
    def start(self) -> None: ...
    @property
    def started(self) -> bool: ...
    def fileno(self) -> int: ...
    def poll(self, timeout: Optional[float] = ...) -> Optional[Device]: ...
