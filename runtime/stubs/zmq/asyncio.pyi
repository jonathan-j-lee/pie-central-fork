import asyncio
from typing import Any, ContextManager, Optional, Union

class Socket:
    def bind(self, addr: str) -> ContextManager[None]: ...
    def connect(self, addr: str) -> ContextManager[None]: ...
    @property
    def closed(self) -> bool: ...
    def close(self, linger: Optional[int] = ...) -> None: ...
    def set(self, option: int, optval: Union[int, bytes]) -> None: ...
    def subscribe(self, topic: str) -> None: ...
    def unsubscribe(self, topic: str) -> None: ...
    def send_multipart(
        self,
        msg: list[bytes],
        flags: int = ...,
        copy: bool = ...,
        track: bool = ...,
        **kwargs: Any,
    ) -> asyncio.Future[None]: ...
    def recv_multipart(
        self,
        flags: int = ...,
        copy: bool = ...,
        track: bool = ...,
    ) -> asyncio.Future[list[bytes]]: ...

class Context:
    @staticmethod
    def instance(io_threads: int = ...) -> 'Context': ...
    def socket(self, socket_type: int, **kwargs: Any) -> Socket: ...
    def term(self) -> None: ...
